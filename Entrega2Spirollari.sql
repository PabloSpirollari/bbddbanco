 ---------------------------Creacion de base de datos con los insert de los datos.---------------------------------
 
 
-- MySQL Script generated by MySQL Workbench
-- Thu Oct 27 02:30:43 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema banco
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema banco
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `banco` DEFAULT CHARACTER SET utf8 ;
USE `banco` ;

-- -----------------------------------------------------
-- Table `banco`.`clientes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`clientes` (
  `id_cliente` INT NOT NULL AUTO_INCREMENT,
  `nombre_cliente` VARCHAR(45) NOT NULL,
  `apellido_cliente` VARCHAR(45) NOT NULL,
  `genero_cliente` VARCHAR(1) NOT NULL,
  `telefono_cliente` DECIMAL(12) NOT NULL,
  `mail_cliente` VARCHAR(35) NOT NULL,
  `numero_documento` DECIMAL(10) NOT NULL,
  `numero_tributario` DECIMAL(13) NOT NULL,
  `fecha_nacimiento` DATE NOT NULL,
  `tipo_cliente` INT NOT NULL,
  `estado_civil` VARCHAR(1) NOT NULL,
  `profesion` VARCHAR(40) NULL,
  `nacionalidad` INT NOT NULL,
  `fecha_alta` DATE NOT NULL,
  PRIMARY KEY (`id_cliente`),
  UNIQUE INDEX `id_cliente_UNIQUE` (`id_cliente` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 1
PACK_KEYS = DEFAULT;


-- -----------------------------------------------------
-- Table `banco`.`clientes_productos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`clientes_productos` (
  `id_cliente` INT NOT NULL,
  `id_cuenta` DECIMAL(10) NOT NULL,
  `tipo_producto` INT NOT NULL,
  `tipo_moneda` INT NOT NULL,
  `fecha_alta` DATE NOT NULL,
  `fecha_baja` DATE NOT NULL,
  PRIMARY KEY (`id_cliente`, `id_cuenta`),
  UNIQUE INDEX `id_cuenta_UNIQUE` (`id_cuenta` ASC) VISIBLE,
  UNIQUE INDEX `id_cliente_UNIQUE` (`id_cliente` ASC) VISIBLE,
  CONSTRAINT `id_cliente`
    FOREIGN KEY (`id_cliente`)
    REFERENCES `banco`.`clientes` (`id_cliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`clientes_tarjetas_debito`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`clientes_tarjetas_debito` (
  `numero_tarjeta` DECIMAL(16) NOT NULL,
  `id_cuenta` DECIMAL(10) NOT NULL,
  `id_marca_tarjeta` INT NOT NULL,
  `tipo_moneda` INT NOT NULL,
  `fecha_alta` DATE NOT NULL,
  `fecha_baja` DATE NOT NULL,
  PRIMARY KEY (`numero_tarjeta`),
  UNIQUE INDEX `numero_tarjeta_UNIQUE` (`numero_tarjeta` ASC) VISIBLE,
  UNIQUE INDEX `id_cuenta_UNIQUE` (`id_cuenta` ASC) VISIBLE,
  CONSTRAINT `id_cuenta5`
    FOREIGN KEY (`id_cuenta`)
    REFERENCES `banco`.`clientes_productos` (`id_cuenta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`clientes_tarjetas_credito`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`clientes_tarjetas_credito` (
  `numero_tarjeta` DECIMAL(16) NOT NULL,
  `id_cuenta` DECIMAL(10) NOT NULL,
  `id_marca_tarjeta` INT NOT NULL,
  `tipo_moneda` INT NOT NULL,
  `fecha_alta` DATE NOT NULL,
  `fecha_baja` DATE NOT NULL,
  PRIMARY KEY (`numero_tarjeta`),
  UNIQUE INDEX `num_tarjeta_UNIQUE` (`numero_tarjeta` ASC) VISIBLE,
  UNIQUE INDEX `id_cuenta_UNIQUE` (`id_cuenta` ASC) VISIBLE,
  CONSTRAINT `id_cuenta4`
    FOREIGN KEY (`id_cuenta`)
    REFERENCES `banco`.`clientes_productos` (`id_cuenta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`tipo_tarjeta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`tipo_tarjeta` (
  `id_marca_tarjeta` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(45) NOT NULL,
  UNIQUE INDEX `id_marca_tarjeta_UNIQUE` (`id_marca_tarjeta` ASC) VISIBLE,
  PRIMARY KEY (`id_marca_tarjeta`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`clientes_cuentas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`clientes_cuentas` (
  `id_cuenta` DECIMAL(10) NOT NULL,
  `saldo` DECIMAL(13,2) NOT NULL,
  `tipo_cuenta` INT NOT NULL,
  `tipo_moneda` INT NOT NULL,
  `fecha_alta` DATE NOT NULL,
  `fecha_baja` DATE NOT NULL,
  PRIMARY KEY (`id_cuenta`),
  UNIQUE INDEX `id_cuentas_UNIQUE` (`id_cuenta` ASC) VISIBLE,
  CONSTRAINT `id_cuenta3`
    FOREIGN KEY (`id_cuenta`)
    REFERENCES `banco`.`clientes_productos` (`id_cuenta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`clientes_inversiones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`clientes_inversiones` (
  `id_inversion` DECIMAL(8) NOT NULL,
  `id_cuenta` DECIMAL(10) NOT NULL,
  `tipo_inversion` INT NOT NULL,
  `tipo_moneda` INT NOT NULL,
  `fecha_alta` DATE NOT NULL,
  `fecha_baja` DATE NOT NULL,
  PRIMARY KEY (`id_inversion`),
  UNIQUE INDEX `id_inversion_UNIQUE` (`id_inversion` ASC) VISIBLE,
  UNIQUE INDEX `id_cuenta_UNIQUE` (`id_cuenta` ASC) VISIBLE,
  CONSTRAINT ` id_cuenta1`
    FOREIGN KEY (`id_cuenta`)
    REFERENCES `banco`.`clientes_productos` (`id_cuenta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`tipo_inversion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`tipo_inversion` (
  `tipo_inversion` INT NOT NULL,
  `descripcion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`tipo_inversion`),
  UNIQUE INDEX `tipo_inversion_UNIQUE` (`tipo_inversion` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`tipo_cuenta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`tipo_cuenta` (
  `tipo_cuenta` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`tipo_cuenta`),
  UNIQUE INDEX `tipo_cuenta_UNIQUE` (`tipo_cuenta` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`clientes_prestamos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`clientes_prestamos` (
  `id_prestamo` DECIMAL(8) NOT NULL,
  `id_cuenta` DECIMAL(10) NOT NULL,
  `tipo_prestamo` INT NOT NULL,
  `tipo_moneda` INT NOT NULL,
  `fecha_alta` DATE NOT NULL,
  `fecha_baja` DATE NOT NULL,
  PRIMARY KEY (`id_prestamo`),
  UNIQUE INDEX `id_prestamo_UNIQUE` (`id_prestamo` ASC) VISIBLE,
  UNIQUE INDEX `id_cuenta_UNIQUE` (`id_cuenta` ASC) VISIBLE,
  CONSTRAINT `id_cuenta2`
    FOREIGN KEY (`id_cuenta`)
    REFERENCES `banco`.`clientes_productos` (`id_cuenta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`tipo_prestamo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`tipo_prestamo` (
  `tipo_prestamo` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`tipo_prestamo`),
  UNIQUE INDEX `tipo_prestamo_UNIQUE` (`tipo_prestamo` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`tipo_producto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`tipo_producto` (
  `tipo_producto` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`tipo_producto`),
  UNIQUE INDEX `tipo_producto_UNIQUE` (`tipo_producto` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`tipo_moneda`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`tipo_moneda` (
  `tipo_moneda` INT NOT NULL,
  `descripcion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`tipo_moneda`),
  UNIQUE INDEX `tipo_moneda_UNIQUE` (`tipo_moneda` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`tipo_cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`tipo_cliente` (
  `tipo_cliente` INT NOT NULL,
  `ingresos_haberes` DECIMAL(9) NOT NULL,
  `descripcion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`tipo_cliente`),
  UNIQUE INDEX `tipo_cliente_UNIQUE` (`tipo_cliente` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco`.`nacionalidad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco`.`nacionalidad` (
  `id_pais` INT NOT NULL AUTO_INCREMENT,
  `pais` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_pais`),
  UNIQUE INDEX `id_nacion_UNIQUE` (`id_pais` ASC) VISIBLE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


 --Termina creacion de la base de datos--
 
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

--Scripts de creacion de vistas:

--Ver clientes masculinos 
CREATE VIEW ClientesMasculinos AS
SELECT nombre_cliente, apellido_cliente, genero_cliente 
FROM banco.clientes
WHERE genero_cliente = 'M';

SELECT * FROM ClientesMasculinos;

--Ver clientes con tarjetas de credito, donde TC es tipo_producto = 2--
CREATE VIEW ClientesConTC as
SELECT
    clientes_productos.tipo_producto,
    clientes_productos.id_cliente
   FROM
    clientes_productos
WHERE
    clientes_productos.tipo_producto = 2
    group by id_cliente
    HAVING COUNT(clientes_productos.id_cliente) = 1;
	
SELECT * FROM ClientesConTC;

--Ver clientes con prestamo UVA, donde prestamos es 4 y prestamo hipotecario = 3

CREATE VIEW ClientesConHipotecarios
AS SELECt
    clientes_productos.id_cliente,
    clientes_productos.tipo_producto,
    clientes_prestamos.tipo_prestamo
FROM
    clientes_productos,
    clientes_prestamos
WHERE
    clientes_productos.tipo_producto = 4 and
    clientes_prestamos.tipo_prestamo = 3;
	
SELECT * FROM ClientesConHipotecarios;

-- Ver clientes mujeres con tarjeta de credito mastercard, donde mastercard es tipo_tarjeta = 2  

--Usar esta linea para que permita usar el group by:--
SET sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

CREATE VIEW ClientesMujeresConMaster
AS SELECT
     clientes.nombre_cliente,
     clientes.apellido_cliente,
     clientes_productos.tipo_producto,
     clientes_tarjetas_credito.numero_tarjeta,
     clientes_tarjetas_credito.id_marca_tarjeta
     
FROM
        clientes_productos,
        clientes,
        clientes_tarjetas_credito
WHERE
     tipo_producto = 2  and
	 id_marca_tarjeta = 2 and
     genero_cliente = 'F';
	group by clientes.nombre_cliente;
	
SELECT * FROM ClientesMujeresConMaster;

	 
-- Ver clientes de mayor edad a menor

CREATE VIEW ClientesEdad AS
SELECT nombre_cliente, apellido_cliente, fecha_nacimiento
FROM clientes
order by fecha_nacimiento ASC;

SELECT * FROM ClientesEdad;

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

--Script de funciones:


--Funcion que ingresandole el id del cliente, te devuelve la edad del mismo
--para usarla es : SELECT CALCULAREDAD (1) AS edad; 
CREATE DEFINER=`root`@`localhost` FUNCTION `calcularedad`(id int) RETURNS int
    NO SQL
BEGIN
	DECLARE RESULTADO INT;
    DECLARE DIAS INT;
    DECLARE AÑO INT;
    DECLARE EDAD INT;
    SET DIAS =  (SELECT DATEDIFF(CURDATE(), FECHA_NACIMIENTO) FROM clientes where id_cliente = id);
	SET ID = (select id_cliente from clientes WHERE id_cliente = id);
    SET AÑO = 365;
    SET EDAD = DIAS / AÑO; 
RETURN EDAD;
END

SELECT CALCULAREDAD (1) AS edad;
 
--Funcion que al ingresar el ID del cliente, devuelve breve información del mismo.--
CREATE DEFINER=`root`@`localhost` FUNCTION `infocliente`(id int) RETURNS varchar(100) CHARSET utf8mb3
    READS SQL DATA
BEGIN
DECLARE RESPUESTA varchar(100);

IF id = 0 THEN
set respuesta = "ID erroneo";
else
select concat(nombre_cliente,'  ',apellido_cliente,' |DU:  ',numero_documento,'  |FechaNac:  ',fecha_nacimiento)
into respuesta from clientes where id_cliente = id;
end if;
RETURN respuesta;
END

SELECT INFOCLIENTE (1) as ID;

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------


--Script de creación de Stored Procedures

--Crea una Cuenta de ahorro o cuenta corriente a un cliente:

CREATE DEFINER=`root`@`localhost` PROCEDURE `CreacionCuenta`
(IN idcuenta decimal(10,0),  -- ID de la cuenta
 IN saldo decimal(13,2),     -- Saldo de la cuenta a ingresar: 0000000000000.00 (13 digitos mas los centavos)
 IN tipocuenta int,          -- Tipo de Cuenta= 1 CA Pesos , 2 CA Dolares, 3 CC Pesos, 4 CC Dolares
 IN tipomoneda int,          -- Tipo de Moneda= 1 Pesos , 2 Dolares
 IN fecalta date,            -- Fecha de alta = formato 'AAAA-MM-DD'
 IN fecbaja date)           -- Fecha de alta = formato 'AAAA-MM-DD' 
BEGIN      
INSERT INTO clientes_cuentas values (idcuenta, saldo, tipocuenta, tipomoneda, fecalta, fecbaja);
END

call CreacionCuenta(1000000006,50000.00,1,1,'2022-10-19','2024-01-01');


---------------------------------------------------------------------------------------------------------------------

--SP que selecciona la tabla "clientes" y filtra por la columna ingresada y por el orden (asc o desc)

CREATE DEFINER=`root`@`localhost` PROCEDURE `SPSelecion`
(IN columna varchar(24), --Ingresar columna la cual se quiere filtrar por ej:'id_cliente'
IN orden VARCHAR(24))    --Ingresar el orden:'ASC' o 'DESC' (si o si hay que escribirlos asi y con ' ')
BEGIN
	SET @ordenar = CONCAT("SELECT * FROM clientes ORDER BY ", columna , " ", orden);
    PREPARE sentencia FROM @ordenar;
    EXECUTE sentencia;
	DEALLOCATE PREPARE sentencia;
END


call SPSelecion('id_cliente','asc');
call SPSelecion('id_cliente','desc');

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------


-----------------------------------------------Triggers de tabla "clientes"---------------------------------------
--Crea tabla "clienteslog1" para el trigger Insert_clientes
create table clienteslog1 (
id_cliente int not null auto_increment,
nombre_cliente varchar(45),
apellido_cliente varchar(45),
numero_documento int,
fecha_alta date not null,
hora_alta time not null,
operador_id varchar(45),
tipo_operacion varchar(45),
primary key(id_cliente));

--Lo que hace el trigger es crear un registro que deja la info solicitada y ademas el id del cliente, nombre y apellido, etc.
--Esto es post insercion de un cliente nuevo en la tabla principal de "clientes"

create trigger insert_clientes 
after insert on clientes 
for each row
insert into clienteslog1 (id_cliente,nombre_cliente,apellido_cliente,numero_documento,fecha_alta,hora_alta,operador_id,tipo_operacion)
values
(new.id_cliente,new.nombre_cliente,new.apellido_cliente,new.numero_documento,CURDATE(),CURTIME(),session_user(),'Nuevo Cliente Insertado en la base');

--Para testearlo:

insert into clientes
values
(11,'Pablo','Spirollari','M',1112345678,'PABLOSPIRO@GMAIL.COM',11223344,20112233440,'1996-08-01',1,'S','Analista Funcional',1,'2022-10-21');

select * from clienteslog1;

--------------------------------------------------------------------------------------------------------------------------------------------------

--Crea tabla "clienteslog2" para el trigger update_clientes

create table clienteslog2 (
id int not null auto_increment,
nombre varchar(45),
apellido varchar(45),
documento int,
numtributario decimal(13,0),
nacionalidad int,
fecha_update date not null,
hora_update time not null,
operador_id varchar(45),
tipo_operacion varchar(45),
primary key(id));

--Lo que hace el trigger es que previo a realizarse el update, crea una copia de las columnas mas importantes de la tabla "clientes"

create trigger update_clientes
before update on clientes 
for each row
insert into clienteslog2 (id,nombre,apellido,documento,numtributario,nacionalidad,fecha_update,hora_update,operador_id,tipo_operacion)
values
(old.id_cliente,old.nombre_cliente,old.apellido_cliente,old.numero_documento,old.numero_tributario,old.nacionalidad,CURDATE(),CURTIME(),session_user(),
'Informacion previa a update');

--Para testearlo:

update clientes
set numero_documento = 11112222
where id_cliente = 1;

select * from clienteslog2;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------Triggers de tabla "clientes_cuentas"----------------------------------------------------------------------------------

--Crea tabla cuentaslog1 para almacenar informacion de los update de saldo previo que se realicen en las cuentas.
create table cuentaslog1 (
id int not null auto_increment,
id_cuenta decimal(12,0) not null,
saldo decimal (13,2),
fecha_update date,
hora_update time,
operador_id varchar(45),
tipo_operacion varchar(45),
primary key (id,id_cuenta));

--Crea un trigger que almacena el saldo previo de la cuenta previo a que se realice el update.
create trigger update_cuentas
before update on clientes_cuentas
for each row
insert into cuentaslog1 (id,id_cuenta,saldo,fecha_update,hora_update,operador_id,tipo_operacion)
values
(old.id_cliente,old.id_cuentas,old.saldo,CURDATE(),CURTIME(),session_user(),'Saldo previo al update');

--Para testearlo:
update clientes_cuentas
set saldo = 5000
where id_cuenta = 1000000001;

--Para poder realizar updates:
SET SQL_SAFE_UPDATES = 0;

select * from cuentaslog1;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Crea una tabla para almacenar un espejo de la cuenta al momento de cierre (delete), ya que se podria re abrir

create table cuentaslog2 (
id int not null auto_increment,
id_cuenta decimal(12,0) not null,
tipo_cuenta int,
tipo_moneda int,
fecha_delete date,
hora_delete time,
operador_id varchar(45),
tipo_operacion varchar(45),
primary key (id,id_cuenta));

--Crea trigger que guarda informacion de la cuenta completa, salvo de su saldo (ya que si se borra, se podria re abrir pero el saldo se restaura a 0$)

create trigger delete_cuentas
after delete on clientes_cuentas
for each row
insert into cuentaslog2 (id_cuenta,tipo_cuenta,tipo_moneda,fecha_delete,hora_delete,operador_id,tipo_operacion)
VALUES
(old.id_cuenta,old.tipo_cuenta,old.tipo_moneda,CURDATE(),CURTIME(),session_user(),'Backup de cuenta');

--Para testearlo:
delete from clientes_cuentas
where id_cuenta = 1000000002;

select * from cuentaslog2;

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------